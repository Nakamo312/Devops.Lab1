#!/usr/bin/env python3
import tempfile
import subprocess
import os
import json
import hashlib
import hmac
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
import sys
import requests

PORT = 8080
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN', '')  
APP_ID = os.getenv('ID', 'localhost')  # ‚Üê –∑–¥–µ—Å—å
PROXY_DOMAIN = os.getenv('PROXY', 'local')  # ‚Üê –∑–¥–µ—Å—å
TOKEN = os.getenv('TOKEN', 'local') 
class WebhookHandler(BaseHTTPRequestHandler):

    def do_POST(self):
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            body = self.rfile.read(content_length)

            try:
                payload = json.loads(body.decode('utf-8'))
                self._process_webhook(payload)

                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(b'{"status": "success"}')

            except json.JSONDecodeError:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
                self.send_response(400)
                self.end_headers()
                
        except BrokenPipeError:
            print("   ‚ÑπÔ∏è  –ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")
            self.send_response(200)
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()

        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>DevOps Webhook Demo</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; }}
                .container {{ background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                h1 {{ color: #4d90cd; text-align: center; }}
                .info {{ background-color: #e7f3ff; padding: 15px; border-radius: 5px; margin: 20px 0; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üöÄ DevOps Webhook Demo Server</h1>
                <div class="info">
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç webhook —Å–æ–±—ã—Ç–∏—è –æ—Ç GitHub</p>
                    <p><strong>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</strong> {time}</p>
                    <p><strong>–ü–æ—Ä—Ç:</strong> {port}</p>
                    <p><strong>GitHub Status:</strong> {github_status}</p>
                </div>
                <p>–≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ Git —Å–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã.</p>
                <p>–ö–∞–∂–¥—ã–π push, pull request –∏–ª–∏ release –±—É–¥–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞.</p>
            </div>
        </body>
        </html>
        """.format(
            time=datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 
            port=PORT,
            github_status="‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if GITHUB_TOKEN else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ (–Ω–µ—Ç GITHUB_TOKEN)"
        )

        self.wfile.write(html.encode('utf-8'))

    def _process_webhook(self, payload):
        event_type = self.headers.get('X-GitHub-Event', 'unknown')
        repo_name = payload.get('repository', {}).get('full_name', 'unknown')
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        print(f"\nüîî –ü–æ–ª—É—á–µ–Ω–æ webhook —Å–æ–±—ã—Ç–∏–µ:")
        print(f"   –í—Ä–µ–º—è: {timestamp}")
        print(f"   –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
        print(f"   –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_name}")

        if event_type == 'push':
            self._handle_push_event(payload)
        elif event_type == 'pull_request':
            self._handle_pr_event(payload)
        elif event_type == 'release':
            self._handle_release_event(payload)
        else:
            print(f"   ‚ÑπÔ∏è  –°–æ–±—ã—Ç–∏–µ '{event_type}' - –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")

    def _update_github_status(self, payload, state, description, context="ci/catty-reminders"):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–º–º–∏—Ç–∞ –≤ GitHub"""
        if not GITHUB_TOKEN:
            return

        try:
            repo_full_name = payload.get('repository', {}).get('full_name')
            commit_sha = payload.get('after') or payload.get('pull_request', {}).get('head', {}).get('sha')
            
            if not repo_full_name or not commit_sha:
                return

            url = f"https://api.github.com/repos/{repo_full_name}/statuses/{commit_sha}"
            
            headers = {
                'Authorization': f'token {GITHUB_TOKEN}',
                'Accept': 'application/vnd.github.v3+json'
            }
            
            data = {
                "state": state,
                "target_url": f"http://app.{APP_ID}.{PROXY_DOMAIN}:8080",
                "description": description,
                "context": context
            }
            
            response = requests.post(url, headers=headers, json=data)
            if response.status_code == 201:
                print(f"   üìä GitHub Status: {state} - {description}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ GitHub: {e}")

    def _handle_push_event(self, payload):
        commits = payload.get('commits', [])
        branch = payload.get('ref', '').replace('refs/heads/', '')
        pusher = payload.get('pusher', {}).get('name', 'unknown')
        clone_url = payload.get('repository', {}).get('clone_url', 'unknown')

        print(f"   üìù Push –≤ –≤–µ—Ç–∫—É: {branch}")
        print(f"   üë§ –ê–≤—Ç–æ—Ä: {pusher}")
        print(f"   üìä –ö–æ–º–º–∏—Ç–æ–≤: {len(commits)}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ GitHub - –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
        self._update_github_status(payload, "pending", "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")

        print(f"   üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Æ:")
        
        working_dir = "/home/v1k70r/tmp/catty-reminders-app"
        
        try:
            if not os.path.exists(working_dir):
                print(f"      ‚ùå –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {working_dir}")
                self._update_github_status(payload, "error", "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            print(f"      –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {working_dir}")

            print(f"      - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –≤–µ—Ç–∫–∏ {branch}...")
            pull_result = subprocess.run(
                ["git", "pull", "origin", branch],
                cwd=working_dir,
                capture_output=True,
                text=True
            )
            
            if pull_result.returncode == 0:
                print(f"      ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                if pull_result.stdout.strip():
                    print(f"         {pull_result.stdout.strip()}")
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π!")
                print(f"         {pull_result.stderr if pull_result.stderr else pull_result.stdout}")
                self._update_github_status(payload, "error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            self._update_github_status(payload, "pending", "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")

            print(f"      - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ...")
            test_result = subprocess.run(
                ["./test.sh"],
                cwd=working_dir,
                capture_output=True,
                text=True
            )
            
            if test_result.returncode == 0:
                print(f"      ‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
                if test_result.stdout.strip():
                    print(f"         {test_result.stdout.strip()}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å - —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
                self._update_github_status(payload, "pending", "–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è...")

                print(f"      - –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è...")
                deploy_result = subprocess.run(
                    ["./deploy.sh"],
                    cwd=os.getcwd(),
                    capture_output=True,
                    text=True
                )
                
                if deploy_result.returncode == 0:
                    print(f"      ‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    if deploy_result.stdout.strip():
                        print(f"         {deploy_result.stdout.strip()}")
                    
                    # –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    self._update_github_status(payload, "success", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    
                    print(f"   üéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    print(f"   üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ: http://app.$ID.$PROXY:8181")
                    
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è!")
                    print(f"         {deploy_result.stderr if deploy_result.stderr else deploy_result.stdout}")
                    self._update_github_status(payload, "failure", "–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è")
                    return

            else:
                print(f"      ‚ùå –¢–µ—Å—Ç—ã —É–ø–∞–ª–∏! –î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω.")
                print(f"         {test_result.stderr if test_result.stderr else test_result.stdout}")
                self._update_github_status(payload, "failure", "–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
                print(f"   üö´ Pull –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")

        except Exception as e:
            print(f"      ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            self._update_github_status(payload, "error", f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    def _handle_pr_event(self, payload):
        action = payload.get('action', '')
        pr_number = payload.get('pull_request', {}).get('number', '')
        title = payload.get('pull_request', {}).get('title', '')

        print(f"   üîÄ Pull Request #{pr_number}: {action}")
        print(f"   üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")

    def _handle_release_event(self, payload):
        action = payload.get('action', '')
        tag_name = payload.get('release', {}).get('tag_name', '')

        print(f"   üè∑Ô∏è  Release {tag_name}: {action}")

def main():
    print(f"üöÄ –ó–∞–ø—É—Å–∫ DevOps Webhook Demo Server")
    print(f"üì° –ü–æ—Ä—Ç: {PORT}")
    print(f"üåê URL: http://0.0.0.0:{PORT}")
    print(f"üîß Webhook URL: http://0.0.0.0:{PORT}/webhook")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    if GITHUB_TOKEN:
        print(f"üîó GitHub Status: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ")
    else:
        print(f"üîó GitHub Status: ‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ (—É—Å—Ç–∞–Ω–æ–≤–∏ GITHUB_TOKEN –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏)")
    
    print(f"\nüëÄ –û–∂–∏–¥–∞–Ω–∏–µ webhook —Å–æ–±—ã—Ç–∏–π –æ—Ç GitHub...")
    print(f"üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C\n")

    try:
        server = HTTPServer(('0.0.0.0', PORT), WebhookHandler)
        server.serve_forever()
    except KeyboardInterrupt:
        print(f"\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()